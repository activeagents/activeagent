---
http_interactions:
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"user","content":"Navigate
        to: https://www.example.com\n\nTask: Navigate to the page and describe what
        you see\n\n\nUse Playwright MCP tools to complete this task efficiently.\n"}],"temperature":0.7}'
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_ACCESS_TOKEN>
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Tue, 02 Sep 2025 04:54:13 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - user-lwlf4w2yvortlzept3wqx7li
      Openai-Processing-Ms:
      - '6979'
      Openai-Project:
      - proj_KAJGwI6N1x3lWSKGr0zi2zcu
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '6983'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9999'
      X-Ratelimit-Remaining-Tokens:
      - '199959'
      X-Ratelimit-Reset-Requests:
      - 8.64s
      X-Ratelimit-Reset-Tokens:
      - 12ms
      X-Request-Id:
      - req_95ff118e66a44dc09ad3d4f24324673c
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=SPgXAKzDeqoNxMdmtIsiCX2YEzuLy0ndqIB8JU_o1Qk-1756788853-1.0.1.1-I4kXILhQHbv1uucPTyG7032NMKSaUCBygynjNHvCofqOmkLuaJFvXnwiuw5zd0ZZNDecH2Oot0ASqbcaunCBnDp1CBzhC7fa_WesSCaZT4k;
        path=/; expires=Tue, 02-Sep-25 05:24:13 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=7OLvpIFqk54Yx7OgMTpjQwCpcO1L_exteebZXpbcT1c-1756788853297-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 978a684c4e253f0c-LAX
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-CBDJuoor9UVq0R7eaSVfRFH4KAozp",
          "object": "chat.completion",
          "created": 1756788846,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "I'm unable to browse the internet or access external websites directly, including the URL you've provided. However, I can guide you on how to use Playwright to navigate to a webpage and describe its contents programmatically.\n\nHere's a simple example of how you can use Playwright to navigate to a website and log the page content:\n\n```javascript\nconst { chromium } = require('playwright');\n\n(async () => {\n  // Launch a browser\n  const browser = await chromium.launch();\n  const context = await browser.newContext();\n  const page = await context.newPage();\n\n  // Navigate to the specified URL\n  await page.goto('https://www.example.com');\n\n  // Wait for the page to load completely\n  await page.waitForLoadState('networkidle');\n\n  // Get the title of the page\n  const title = await page.title();\n  console.log(`Page Title: ${title}`);\n\n  // Get the content of the body\n  const content = await page.content();\n  console.log(`Page Content: ${content.substring(0, 200)}...`); // Log the first 200 characters\n\n  // Close the browser\n  await browser.close();\n})();\n```\n\n### Explanation:\n1. **Import Playwright**: You first import the necessary methods from Playwright.\n2. **Launch Browser**: You launch a new instance of the Chrome browser.\n3. **Create New Context and Page**: You create a new browser context and a new page within that context.\n4. **Navigate to URL**: The code navigates to the provided URL.\n5. **Wait for Load**: It waits until the network is idle, indicating the page has loaded.\n6. **Get Page Title and Content**: It retrieves the title and content of the page. In this example, it logs the first 200 characters of the body content.\n7. **Close Browser**: Finally, it closes the browser.\n\n### Running the Code:\nMake sure you have Node.js installed along with Playwright. You can install Playwright using npm:\n\n```bash\nnpm install playwright\n```\n\nThen, run the script using Node.js:\n\n```bash\nnode your_script_name.js\n```\n\nThis will print the title and part of the content of the specified webpage to the console. Adjust the URL and the content you want to log according to your needs.",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 39,
            "completion_tokens": 476,
            "total_tokens": 515,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_e665f7564b"
        }
  recorded_at: Tue, 02 Sep 2025 04:54:12 GMT
recorded_with: VCR 6.3.1

---
http_interactions:
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"user","content":"Navigate
        to: https://www.example.com\n\nCapture the page content for structured data
        extraction:\n\n1. Navigate to the URL\n2. Wait for the page to fully load\n3.
        Use browser_snapshot to capture the accessibility tree\n4. Extract all text
        content\n5. Identify all interactive elements (links, buttons, forms)\n6.
        Note the page structure and hierarchy\n\nReturn a comprehensive description
        of the page content that can be used for structured data extraction.\nInclude:\n-
        Page title\n- All headings and their hierarchy\n- Main content areas\n- All
        links with their text and destinations\n- Form fields if present\n- Any data
        tables or lists\n- Important metadata\n\nUse Playwright MCP tools to gather
        this information systematically.\n"}],"temperature":0.7}'
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_ACCESS_TOKEN>
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Tue, 02 Sep 2025 05:16:43 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - user-lwlf4w2yvortlzept3wqx7li
      Openai-Processing-Ms:
      - '9815'
      Openai-Project:
      - proj_KAJGwI6N1x3lWSKGr0zi2zcu
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '9821'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9999'
      X-Ratelimit-Remaining-Tokens:
      - '199820'
      X-Ratelimit-Reset-Requests:
      - 8.64s
      X-Ratelimit-Reset-Tokens:
      - 54ms
      X-Request-Id:
      - req_abdc40693022403db46fe12960a82526
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=rBc1XM8kHWCkBqhfrL4jRRu9EhHx6yfRN_ZfFqvqZEE-1756790203-1.0.1.1-rCNY54fpdlp7qcp6s8HuP.lBCWW4P_tSXsFo_ttIGjM3invziVUmKOYNWCmlaxglqkl1oyDCZRXGxM24Wac9Uvk7f4AK3lAOCvxd9vrmNL4;
        path=/; expires=Tue, 02-Sep-25 05:46:43 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=ssrDa5hSx7eDh1sU25j4glQPjrFMHc4Pm5NVkRooeeY-1756790203245-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 978a892faf0ff7db-LAX
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJpZCI6ICJjaGF0Y21wbC1DQkRmZGZPSXFFYUFGTUNrdG00cGMwb1FnRFowSiIsCiAgIm9iamVjdCI6ICJjaGF0LmNvbXBsZXRpb24iLAogICJjcmVhdGVkIjogMTc1Njc5MDE5MywKICAibW9kZWwiOiAiZ3B0LTRvLW1pbmktMjAyNC0wNy0xOCIsCiAgImNob2ljZXMiOiBbCiAgICB7CiAgICAgICJpbmRleCI6IDAsCiAgICAgICJtZXNzYWdlIjogewogICAgICAgICJyb2xlIjogImFzc2lzdGFudCIsCiAgICAgICAgImNvbnRlbnQiOiAiSSdtIHVuYWJsZSB0byBuYXZpZ2F0ZSB0byBleHRlcm5hbCB3ZWJzaXRlcyBvciBwZXJmb3JtIHdlYiBzY3JhcGluZyB0YXNrcyBkaXJlY3RseS4gSG93ZXZlciwgSSBjYW4gcHJvdmlkZSB5b3Ugd2l0aCBhIHN0cnVjdHVyZWQgYXBwcm9hY2ggb24gaG93IHRvIGNhcHR1cmUgYW5kIGV4dHJhY3QgZGF0YSBmcm9tIGEgd2VicGFnZSB1c2luZyBQbGF5d3JpZ2h0IG9yIHNpbWlsYXIgdG9vbHMuIEhlcmXigJlzIGEgc3RlcC1ieS1zdGVwIGd1aWRlIG9uIGhvdyB0byBhY2hpZXZlIHRoaXM6XG5cbiMjIyBTdGVwLWJ5LVN0ZXAgR3VpZGUgVXNpbmcgUGxheXdyaWdodFxuXG4xLiAqKk5hdmlnYXRlIHRvIHRoZSBVUkwqKjpcbiAgIFVzZSBQbGF5d3JpZ2h0IHRvIG5hdmlnYXRlIHRvIHRoZSBkZXNpcmVkIHdlYnBhZ2UuXG4gICBgYGBqYXZhc2NyaXB0XG4gICBjb25zdCB7IGNocm9taXVtIH0gPSByZXF1aXJlKCdwbGF5d3JpZ2h0Jyk7XG5cbiAgIChhc3luYyAoKSA9PiB7XG4gICAgICAgY29uc3QgYnJvd3NlciA9IGF3YWl0IGNocm9taXVtLmxhdW5jaCgpO1xuICAgICAgIGNvbnN0IHBhZ2UgPSBhd2FpdCBicm93c2VyLm5ld1BhZ2UoKTtcbiAgICAgICBhd2FpdCBwYWdlLmdvdG8oJ2h0dHBzOi8vd3d3LmV4YW1wbGUuY29tJyk7XG4gICBgYGBcblxuMi4gKipXYWl0IGZvciB0aGUgUGFnZSB0byBGdWxseSBMb2FkKio6XG4gICBFbnN1cmUgdGhlIHBhZ2UgaXMgZnVsbHkgbG9hZGVkIGJlZm9yZSBjYXB0dXJpbmcgY29udGVudC5cbiAgIGBgYGphdmFzY3JpcHRcbiAgICAgICBhd2FpdCBwYWdlLndhaXRGb3JMb2FkU3RhdGUoJ25ldHdvcmtpZGxlJyk7XG4gICBgYGBcblxuMy4gKipDYXB0dXJlIHRoZSBBY2Nlc3NpYmlsaXR5IFRyZWUqKjpcbiAgIFVzZSB0aGUgUGxheXdyaWdodCBidWlsdC1pbiBmdW5jdGlvbnMgdG8gY2FwdHVyZSB0aGUgYWNjZXNzaWJpbGl0eSB0cmVlLlxuICAgYGBgamF2YXNjcmlwdFxuICAgICAgIGNvbnN0IGFjY2Vzc2liaWxpdHlUcmVlID0gYXdhaXQgcGFnZS5hY2Nlc3NpYmlsaXR5LnNuYXBzaG90KCk7XG4gICBgYGBcblxuNC4gKipFeHRyYWN0IEFsbCBUZXh0IENvbnRlbnQqKjpcbiAgIFJldHJpZXZlIHRoZSB0ZXh0IGNvbnRlbnQgb2YgdGhlIHBhZ2UuXG4gICBgYGBqYXZhc2NyaXB0XG4gICAgICAgY29uc3QgcGFnZVRleHQgPSBhd2FpdCBwYWdlLmV2YWx1YXRlKCgpID0+IGRvY3VtZW50LmJvZHkuaW5uZXJUZXh0KTtcbiAgIGBgYFxuXG41LiAqKklkZW50aWZ5IEFsbCBJbnRlcmFjdGl2ZSBFbGVtZW50cyoqOlxuICAgRmluZCBhbGwgbGlua3MsIGJ1dHRvbnMsIGFuZCBmb3JtIGVsZW1lbnRzLlxuICAgYGBgamF2YXNjcmlwdFxuICAgICAgIGNvbnN0IGxpbmtzID0gYXdhaXQgcGFnZS4kJGV2YWwoJ2EnLCBhbmNob3JzID0+IGFuY2hvcnMubWFwKGFuY2hvciA9PiAoe1xuICAgICAgICAgICB0ZXh0OiBhbmNob3IuaW5uZXJUZXh0LFxuICAgICAgICAgICBocmVmOiBhbmNob3IuaHJlZlxuICAgICAgIH0pKSk7XG4gICAgICAgXG4gICAgICAgY29uc3QgYnV0dG9ucyA9IGF3YWl0IHBhZ2UuJCRldmFsKCdidXR0b24nLCBidG5zID0+IGJ0bnMubWFwKGJ0biA9PiAoe1xuICAgICAgICAgICB0ZXh0OiBidG4uaW5uZXJUZXh0XG4gICAgICAgfSkpKTtcblxuICAgICAgIGNvbnN0IGZvcm1zID0gYXdhaXQgcGFnZS4kJGV2YWwoJ2Zvcm0nLCBmb3JtcyA9PiBmb3Jtcy5tYXAoZm9ybSA9PiAoe1xuICAgICAgICAgICBhY3Rpb246IGZvcm0uYWN0aW9uLFxuICAgICAgICAgICBtZXRob2Q6IGZvcm0ubWV0aG9kXG4gICAgICAgfSkpKTtcbiAgIGBgYFxuXG42LiAqKk5vdGUgdGhlIFBhZ2UgU3RydWN0dXJlIGFuZCBIaWVyYXJjaHkqKjpcbiAgIEV4dHJhY3QgaGVhZGluZ3MgYW5kIHRoZWlyIGhpZXJhcmNoeS5cbiAgIGBgYGphdmFzY3JpcHRcbiAgICAgICBjb25zdCBoZWFkaW5ncyA9IGF3YWl0IHBhZ2UuJCRldmFsKCdoMSwgaDIsIGgzLCBoNCwgaDUsIGg2JywgaGVhZHMgPT4gaGVhZHMubWFwKGhlYWQgPT4gKHtcbiAgICAgICAgICAgdGV4dDogaGVhZC5pbm5lclRleHQsXG4gICAgICAgICAgIGxldmVsOiBoZWFkLnRhZ05hbWVcbiAgICAgICB9KSkpO1xuICAgYGBgXG5cbjcuICoqUmV0dXJuIGEgQ29tcHJlaGVuc2l2ZSBEZXNjcmlwdGlvbioqOlxuICAgRm9ybWF0IHRoZSBleHRyYWN0ZWQgZGF0YSBpbnRvIGEgY29tcHJlaGVuc2l2ZSByZXBvcnQuXG4gICBgYGBqYXZhc2NyaXB0XG4gICAgICAgY29uc29sZS5sb2coe1xuICAgICAgICAgICB0aXRsZTogYXdhaXQgcGFnZS50aXRsZSgpLFxuICAgICAgICAgICBoZWFkaW5ncyxcbiAgICAgICAgICAgcGFnZVRleHQsXG4gICAgICAgICAgIGxpbmtzLFxuICAgICAgICAgICBidXR0b25zLFxuICAgICAgICAgICBmb3JtcyxcbiAgICAgICAgICAgYWNjZXNzaWJpbGl0eVRyZWUsXG4gICAgICAgfSk7XG5cbiAgICAgICBhd2FpdCBicm93c2VyLmNsb3NlKCk7XG4gICB9KSgpO1xuICAgYGBgXG5cbiMjIyBFeHBlY3RlZCBPdXRwdXQgU3RydWN0dXJlXG5cbi0gKipQYWdlIFRpdGxlKio6IFRoZSB0aXRsZSBvZiB0aGUgd2VicGFnZS5cbi0gKipIZWFkaW5ncyoqOiBMaXN0IG9mIGhlYWRpbmdzIHdpdGggdGhlaXIgbGV2ZWxzLlxuLSAqKk1haW4gQ29udGVudCBBcmVhcyoqOiBUZXh0IGNvbnRlbnQgZXh0cmFjdGVkIGZyb20gdGhlIGJvZHkgb2YgdGhlIHBhZ2UuXG4tICoqTGlua3MqKjogQXJyYXkgb2Ygb2JqZWN0cyBjb250YWluaW5nIHRleHQgYW5kIGRlc3RpbmF0aW9uIFVSTHMgZm9yIGFsbCBsaW5rcy5cbi0gKipCdXR0b25zKio6IEFycmF5IG9mIGJ1dHRvbiB0ZXh0cy5cbi0gKipGb3JtcyoqOiBBcnJheSB3aXRoIGRldGFpbHMgb2YgZm9ybXMgaW5jbHVkaW5nIGFjdGlvbiBhbmQgbWV0aG9kLlxuLSAqKkFjY2Vzc2liaWxpdHkgVHJlZSoqOiBBIHN0cnVjdHVyZWQgcmVwcmVzZW50YXRpb24gb2YgdGhlIHBhZ2UncyBhY2Nlc3NpYmlsaXR5IGRhdGEuXG4tICoqTWV0YWRhdGEqKjogQW55IHJlbGV2YW50IG1ldGEgdGFncyB0aGF0IG1pZ2h0IGJlIGluY2x1ZGVkIGluIHRoZSBgPGhlYWQ+YCBzZWN0aW9uIG9mIHRoZSBIVE1MLlxuXG4jIyMgSW1wb3J0YW50IE1ldGFkYXRhXG5JZiB5b3UgbmVlZCB0byBjYXB0dXJlIG1ldGFkYXRhOlxuYGBgamF2YXNjcmlwdFxuY29uc3QgbWV0YWRhdGEgPSBhd2FpdCBwYWdlLiQkZXZhbCgnbWV0YScsIG1ldGFzID0+IG1ldGFzLm1hcChtZXRhID0+ICh7XG4gICAgbmFtZTogbWV0YS5nZXRBdHRyaWJ1dGUoJ25hbWUnKSxcbiAgICBjb250ZW50OiBtZXRhLmdldEF0dHJpYnV0ZSgnY29udGVudCcpXG59KSkpO1xuYGBgXG5cblRoaXMgZ3VpZGUgc2hvdWxkIGhlbHAgeW91IHN5c3RlbWF0aWNhbGx5IGV4dHJhY3Qgc3RydWN0dXJlZCBkYXRhIGZyb20gYW55IHdlYnBhZ2UgdXNpbmcgUGxheXdyaWdodC4gQWRqdXN0IHNlbGVjdG9ycyBhY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmljIEhUTUwgc3RydWN0dXJlIG9mIHRoZSBwYWdlIHlvdSBhcmUgd29ya2luZyB3aXRoLiIsCiAgICAgICAgInJlZnVzYWwiOiBudWxsLAogICAgICAgICJhbm5vdGF0aW9ucyI6IFtdCiAgICAgIH0sCiAgICAgICJsb2dwcm9icyI6IG51bGwsCiAgICAgICJmaW5pc2hfcmVhc29uIjogInN0b3AiCiAgICB9CiAgXSwKICAidXNhZ2UiOiB7CiAgICAicHJvbXB0X3Rva2VucyI6IDE1NCwKICAgICJjb21wbGV0aW9uX3Rva2VucyI6IDczOSwKICAgICJ0b3RhbF90b2tlbnMiOiA4OTMsCiAgICAicHJvbXB0X3Rva2Vuc19kZXRhaWxzIjogewogICAgICAiY2FjaGVkX3Rva2VucyI6IDAsCiAgICAgICJhdWRpb190b2tlbnMiOiAwCiAgICB9LAogICAgImNvbXBsZXRpb25fdG9rZW5zX2RldGFpbHMiOiB7CiAgICAgICJyZWFzb25pbmdfdG9rZW5zIjogMCwKICAgICAgImF1ZGlvX3Rva2VucyI6IDAsCiAgICAgICJhY2NlcHRlZF9wcmVkaWN0aW9uX3Rva2VucyI6IDAsCiAgICAgICJyZWplY3RlZF9wcmVkaWN0aW9uX3Rva2VucyI6IDAKICAgIH0KICB9LAogICJzZXJ2aWNlX3RpZXIiOiAiZGVmYXVsdCIsCiAgInN5c3RlbV9maW5nZXJwcmludCI6ICJmcF81MWRiODRhZmFiIgp9Cg==
  recorded_at: Tue, 02 Sep 2025 05:16:42 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"model":"gpt-4o-mini","messages":[{"role":"system","content":"You
        are a data extraction specialist that transforms unstructured content into
        structured JSON data.\n\nYour role is to:\n1. Analyze the provided content
        carefully\n2. Extract relevant information according to the schema\n3. Return
        well-structured JSON that matches the schema exactly\n4. Handle missing data
        gracefully with null or empty values\n5. Ensure all required fields are populated\n\nGuidelines:\n-
        Be precise and accurate in your extraction\n- Don''t invent data that isn''t
        present\n- Use reasonable defaults only when explicitly allowed by the schema\n-
        Maintain consistency in data formatting\n- Follow the schema''s type requirements
        strictly"},{"role":"user","content":"Extract structured data from the following
        content:\n\n---\nI''m unable to navigate to external websites or perform web
        scraping tasks directly. However, I can provide you with a structured approach
        on how to capture and extract data from a webpage using Playwright or similar
        tools. Here’s a step-by-step guide on how to achieve this:\n\n### Step-by-Step
        Guide Using Playwright\n\n1. **Navigate to the URL**:\n   Use Playwright to
        navigate to the desired webpage.\n   ```javascript\n   const { chromium }
        = require(''playwright'');\n\n   (async () =\u003e {\n       const browser
        = await chromium.launch();\n       const page = await browser.newPage();\n       await
        page.goto(''https://www.example.com'');\n   ```\n\n2. **Wait for the Page
        to Fully Load**:\n   Ensure the page is fully loaded before capturing content.\n   ```javascript\n       await
        page.waitForLoadState(''networkidle'');\n   ```\n\n3. **Capture the Accessibility
        Tree**:\n   Use the Playwright built-in functions to capture the accessibility
        tree.\n   ```javascript\n       const accessibilityTree = await page.accessibility.snapshot();\n   ```\n\n4.
        **Extract All Text Content**:\n   Retrieve the text content of the page.\n   ```javascript\n       const
        pageText = await page.evaluate(() =\u003e document.body.innerText);\n   ```\n\n5.
        **Identify All Interactive Elements**:\n   Find all links, buttons, and form
        elements.\n   ```javascript\n       const links = await page.$$eval(''a'',
        anchors =\u003e anchors.map(anchor =\u003e ({\n           text: anchor.innerText,\n           href:
        anchor.href\n       })));\n       \n       const buttons = await page.$$eval(''button'',
        btns =\u003e btns.map(btn =\u003e ({\n           text: btn.innerText\n       })));\n\n       const
        forms = await page.$$eval(''form'', forms =\u003e forms.map(form =\u003e ({\n           action:
        form.action,\n           method: form.method\n       })));\n   ```\n\n6. **Note
        the Page Structure and Hierarchy**:\n   Extract headings and their hierarchy.\n   ```javascript\n       const
        headings = await page.$$eval(''h1, h2, h3, h4, h5, h6'', heads =\u003e heads.map(head
        =\u003e ({\n           text: head.innerText,\n           level: head.tagName\n       })));\n   ```\n\n7.
        **Return a Comprehensive Description**:\n   Format the extracted data into
        a comprehensive report.\n   ```javascript\n       console.log({\n           title:
        await page.title(),\n           headings,\n           pageText,\n           links,\n           buttons,\n           forms,\n           accessibilityTree,\n       });\n\n       await
        browser.close();\n   })();\n   ```\n\n### Expected Output Structure\n\n- **Page
        Title**: The title of the webpage.\n- **Headings**: List of headings with
        their levels.\n- **Main Content Areas**: Text content extracted from the body
        of the page.\n- **Links**: Array of objects containing text and destination
        URLs for all links.\n- **Buttons**: Array of button texts.\n- **Forms**: Array
        with details of forms including action and method.\n- **Accessibility Tree**:
        A structured representation of the page''s accessibility data.\n- **Metadata**:
        Any relevant meta tags that might be included in the `\u003chead\u003e` section
        of the HTML.\n\n### Important Metadata\nIf you need to capture metadata:\n```javascript\nconst
        metadata = await page.$$eval(''meta'', metas =\u003e metas.map(meta =\u003e
        ({\n    name: meta.getAttribute(''name''),\n    content: meta.getAttribute(''content'')\n})));\n```\n\nThis
        guide should help you systematically extract structured data from any webpage
        using Playwright. Adjust selectors according to the specific HTML structure
        of the page you are working with.\n---\n\n\nReturn the data in JSON format
        that strictly conforms to the provided schema.\nOnly include data that is
        actually present in the content.\nFor required fields that are missing, use
        appropriate null or empty values.\n"}],"temperature":0.7,"response_format":{"type":"json_schema","json_schema":{"name":"webpage_info","strict":true,"schema":{"type":"object","properties":{"title":{"type":"string"},"main_heading":{"type":"string"},"links_count":{"type":"integer"},"has_forms":{"type":"boolean"},"main_content_summary":{"type":"string"}},"required":["title","main_heading","links_count","has_forms","main_content_summary"],"additionalProperties":false}}}}'
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <OPENAI_ACCESS_TOKEN>
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Tue, 02 Sep 2025 05:16:47 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Expose-Headers:
      - X-Request-ID
      Openai-Organization:
      - user-lwlf4w2yvortlzept3wqx7li
      Openai-Processing-Ms:
      - '1551'
      Openai-Project:
      - proj_KAJGwI6N1x3lWSKGr0zi2zcu
      Openai-Version:
      - '2020-10-01'
      X-Envoy-Upstream-Service-Time:
      - '1560'
      X-Ratelimit-Limit-Requests:
      - '10000'
      X-Ratelimit-Limit-Tokens:
      - '200000'
      X-Ratelimit-Remaining-Requests:
      - '9999'
      X-Ratelimit-Remaining-Tokens:
      - '198915'
      X-Ratelimit-Reset-Requests:
      - 8.64s
      X-Ratelimit-Reset-Tokens:
      - 325ms
      X-Request-Id:
      - req_6124d67623ea4fb89e6074213aec8e3e
      Cf-Cache-Status:
      - DYNAMIC
      Set-Cookie:
      - __cf_bm=vm7arhwrkeX__P4CvjIaFetnzhMEkyjQEr3qkEhbfV8-1756790207-1.0.1.1-8ATrwufX0r02xhNPRaUTrPmBvFEbQa_WAJdj1AihRcpZaekoZGKNAdCaLR1NoliiQag1gZuvMG5UKCtnTcKkpcHsupTLjyhinH_6No_i3Ww;
        path=/; expires=Tue, 02-Sep-25 05:46:47 GMT; domain=.api.openai.com; HttpOnly;
        Secure; SameSite=None
      - _cfuvid=ORhxYgDZhI4XnC9NSMlxkRW45ArkbnHrGLmD47vS8jk-1756790207775-0.0.1.1-604800000;
        path=/; domain=.api.openai.com; HttpOnly; Secure; SameSite=None
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Type-Options:
      - nosniff
      Server:
      - cloudflare
      Cf-Ray:
      - 978a897e0b1ff7b1-LAX
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-CBDfq3B1UemalTGPf0Ur3KtA62q7S",
          "object": "chat.completion",
          "created": 1756790206,
          "model": "gpt-4o-mini-2024-07-18",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "{\"title\":\"\" ,\"main_heading\":\"\" ,\"links_count\":0 ,\"has_forms\":false ,\"main_content_summary\":\"I'm unable to navigate to external websites or perform web scraping tasks directly. However, I can provide you with a structured approach on how to capture and extract data from a webpage using Playwright or similar tools.\"}",
                "refusal": null,
                "annotations": []
              },
              "logprobs": null,
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 981,
            "completion_tokens": 66,
            "total_tokens": 1047,
            "prompt_tokens_details": {
              "cached_tokens": 0,
              "audio_tokens": 0
            },
            "completion_tokens_details": {
              "reasoning_tokens": 0,
              "audio_tokens": 0,
              "accepted_prediction_tokens": 0,
              "rejected_prediction_tokens": 0
            }
          },
          "service_tier": "default",
          "system_fingerprint": "fp_8bda4d3a2c"
        }
  recorded_at: Tue, 02 Sep 2025 05:16:47 GMT
recorded_with: VCR 6.3.1
